// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.28.0
// source: lsp/twitter/twitter.proto

package twitter

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TweetMessage struct {
	state             protoimpl.MessageState      `protogen:"open.v1"`
	XTypename         string                      `protobuf:"bytes,1,opt,name=__typename,json=Typename,proto3" json:"__typename,omitempty"`
	Lang              string                      `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	FavoriteCount     int32                       `protobuf:"varint,3,opt,name=favorite_count,json=favoriteCount,proto3" json:"favorite_count,omitempty"`
	PossiblySensitive bool                        `protobuf:"varint,4,opt,name=possibly_sensitive,json=possiblySensitive,proto3" json:"possibly_sensitive,omitempty"`
	CreatedAt         string                      `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DisplayTextRange  []int32                     `protobuf:"varint,6,rep,packed,name=display_text_range,json=displayTextRange,proto3" json:"display_text_range,omitempty"`
	Entities          *TweetMessage_Entities      `protobuf:"bytes,7,opt,name=entities,proto3" json:"entities,omitempty"`
	IdStr             string                      `protobuf:"bytes,8,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`
	Text              string                      `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
	User              *TweetMessage_User          `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	EditControl       *TweetMessage_EditControl   `protobuf:"bytes,11,opt,name=edit_control,json=editControl,proto3" json:"edit_control,omitempty"`
	MediaDetails      []*TweetMessage_MediaDetail `protobuf:"bytes,12,rep,name=media_details,json=mediaDetails,proto3" json:"media_details,omitempty"`
	Photos            []*TweetMessage_Photo       `protobuf:"bytes,13,rep,name=photos,proto3" json:"photos,omitempty"`
	Video             *TweetMessage_Video         `protobuf:"bytes,14,opt,name=video,proto3" json:"video,omitempty"`
	Tombstone         *Tombstone                  `protobuf:"bytes,19,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	ConversationCount int32                       `protobuf:"varint,15,opt,name=conversation_count,json=conversationCount,proto3" json:"conversation_count,omitempty"`
	NewsActionType    string                      `protobuf:"bytes,16,opt,name=news_action_type,json=newsActionType,proto3" json:"news_action_type,omitempty"`
	IsEdited          bool                        `protobuf:"varint,17,opt,name=is_edited,json=isEdited,proto3" json:"is_edited,omitempty"`
	IsStaleEdit       bool                        `protobuf:"varint,18,opt,name=is_stale_edit,json=isStaleEdit,proto3" json:"is_stale_edit,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TweetMessage) Reset() {
	*x = TweetMessage{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage) ProtoMessage() {}

func (x *TweetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage.ProtoReflect.Descriptor instead.
func (*TweetMessage) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0}
}

func (x *TweetMessage) GetXTypename() string {
	if x != nil {
		return x.XTypename
	}
	return ""
}

func (x *TweetMessage) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *TweetMessage) GetFavoriteCount() int32 {
	if x != nil {
		return x.FavoriteCount
	}
	return 0
}

func (x *TweetMessage) GetPossiblySensitive() bool {
	if x != nil {
		return x.PossiblySensitive
	}
	return false
}

func (x *TweetMessage) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TweetMessage) GetDisplayTextRange() []int32 {
	if x != nil {
		return x.DisplayTextRange
	}
	return nil
}

func (x *TweetMessage) GetEntities() *TweetMessage_Entities {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *TweetMessage) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *TweetMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TweetMessage) GetUser() *TweetMessage_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *TweetMessage) GetEditControl() *TweetMessage_EditControl {
	if x != nil {
		return x.EditControl
	}
	return nil
}

func (x *TweetMessage) GetMediaDetails() []*TweetMessage_MediaDetail {
	if x != nil {
		return x.MediaDetails
	}
	return nil
}

func (x *TweetMessage) GetPhotos() []*TweetMessage_Photo {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *TweetMessage) GetVideo() *TweetMessage_Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *TweetMessage) GetTombstone() *Tombstone {
	if x != nil {
		return x.Tombstone
	}
	return nil
}

func (x *TweetMessage) GetConversationCount() int32 {
	if x != nil {
		return x.ConversationCount
	}
	return 0
}

func (x *TweetMessage) GetNewsActionType() string {
	if x != nil {
		return x.NewsActionType
	}
	return ""
}

func (x *TweetMessage) GetIsEdited() bool {
	if x != nil {
		return x.IsEdited
	}
	return false
}

func (x *TweetMessage) GetIsStaleEdit() bool {
	if x != nil {
		return x.IsStaleEdit
	}
	return false
}

type Tombstone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          *Text                  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tombstone) Reset() {
	*x = Tombstone{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tombstone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tombstone) ProtoMessage() {}

func (x *Tombstone) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tombstone.ProtoReflect.Descriptor instead.
func (*Tombstone) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{1}
}

func (x *Tombstone) GetText() *Text {
	if x != nil {
		return x.Text
	}
	return nil
}

type Text struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Entities      []*Entity              `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
	Rtl           bool                   `protobuf:"varint,3,opt,name=rtl,proto3" json:"rtl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Text) Reset() {
	*x = Text{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{2}
}

func (x *Text) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Text) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *Text) GetRtl() bool {
	if x != nil {
		return x.Rtl
	}
	return false
}

type Entity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromIndex     int32                  `protobuf:"varint,1,opt,name=from_index,json=fromIndex,proto3" json:"from_index,omitempty"`
	ToIndex       int32                  `protobuf:"varint,2,opt,name=to_index,json=toIndex,proto3" json:"to_index,omitempty"`
	Ref           *TimelineUrl           `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entity) Reset() {
	*x = Entity{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{3}
}

func (x *Entity) GetFromIndex() int32 {
	if x != nil {
		return x.FromIndex
	}
	return 0
}

func (x *Entity) GetToIndex() int32 {
	if x != nil {
		return x.ToIndex
	}
	return 0
}

func (x *Entity) GetRef() *TimelineUrl {
	if x != nil {
		return x.Ref
	}
	return nil
}

type TimelineUrl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XTypename     string                 `protobuf:"bytes,1,opt,name=__typename,json=Typename,proto3" json:"__typename,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	UrlType       string                 `protobuf:"bytes,3,opt,name=url_type,json=urlType,proto3" json:"url_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimelineUrl) Reset() {
	*x = TimelineUrl{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimelineUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineUrl) ProtoMessage() {}

func (x *TimelineUrl) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineUrl.ProtoReflect.Descriptor instead.
func (*TimelineUrl) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{4}
}

func (x *TimelineUrl) GetXTypename() string {
	if x != nil {
		return x.XTypename
	}
	return ""
}

func (x *TimelineUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TimelineUrl) GetUrlType() string {
	if x != nil {
		return x.UrlType
	}
	return ""
}

// 新增照片结构定义
type TweetMessage_Photo struct {
	state           protoimpl.MessageState              `protogen:"open.v1"`
	BackgroundColor *TweetMessage_Photo_Color           `protobuf:"bytes,1,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	CropCandidates  []*TweetMessage_Photo_CropCandidate `protobuf:"bytes,2,rep,name=crop_candidates,json=cropCandidates,proto3" json:"crop_candidates,omitempty"`
	ExpandedUrl     string                              `protobuf:"bytes,3,opt,name=expanded_url,json=expandedUrl,proto3" json:"expanded_url,omitempty"`
	Url             string                              `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Width           int32                               `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height          int32                               `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TweetMessage_Photo) Reset() {
	*x = TweetMessage_Photo{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_Photo) ProtoMessage() {}

func (x *TweetMessage_Photo) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_Photo.ProtoReflect.Descriptor instead.
func (*TweetMessage_Photo) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TweetMessage_Photo) GetBackgroundColor() *TweetMessage_Photo_Color {
	if x != nil {
		return x.BackgroundColor
	}
	return nil
}

func (x *TweetMessage_Photo) GetCropCandidates() []*TweetMessage_Photo_CropCandidate {
	if x != nil {
		return x.CropCandidates
	}
	return nil
}

func (x *TweetMessage_Photo) GetExpandedUrl() string {
	if x != nil {
		return x.ExpandedUrl
	}
	return ""
}

func (x *TweetMessage_Photo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TweetMessage_Photo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TweetMessage_Photo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type TweetMessage_Entities struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Urls          []*TweetMessage_UrlEntity   `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
	Media         []*TweetMessage_MediaEntity `protobuf:"bytes,2,rep,name=media,proto3" json:"media,omitempty"` // 其他实体字段...
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TweetMessage_Entities) Reset() {
	*x = TweetMessage_Entities{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_Entities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_Entities) ProtoMessage() {}

func (x *TweetMessage_Entities) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_Entities.ProtoReflect.Descriptor instead.
func (*TweetMessage_Entities) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TweetMessage_Entities) GetUrls() []*TweetMessage_UrlEntity {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *TweetMessage_Entities) GetMedia() []*TweetMessage_MediaEntity {
	if x != nil {
		return x.Media
	}
	return nil
}

type TweetMessage_UrlEntity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayUrl    string                 `protobuf:"bytes,1,opt,name=display_url,json=displayUrl,proto3" json:"display_url,omitempty"`
	ExpandedUrl   string                 `protobuf:"bytes,2,opt,name=expanded_url,json=expandedUrl,proto3" json:"expanded_url,omitempty"`
	Indices       []int32                `protobuf:"varint,3,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	Url           string                 `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TweetMessage_UrlEntity) Reset() {
	*x = TweetMessage_UrlEntity{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_UrlEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_UrlEntity) ProtoMessage() {}

func (x *TweetMessage_UrlEntity) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_UrlEntity.ProtoReflect.Descriptor instead.
func (*TweetMessage_UrlEntity) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TweetMessage_UrlEntity) GetDisplayUrl() string {
	if x != nil {
		return x.DisplayUrl
	}
	return ""
}

func (x *TweetMessage_UrlEntity) GetExpandedUrl() string {
	if x != nil {
		return x.ExpandedUrl
	}
	return ""
}

func (x *TweetMessage_UrlEntity) GetIndices() []int32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *TweetMessage_UrlEntity) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TweetMessage_MediaEntity struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	DisplayUrl    string                  `protobuf:"bytes,1,opt,name=display_url,json=displayUrl,proto3" json:"display_url,omitempty"`
	ExpandedUrl   string                  `protobuf:"bytes,2,opt,name=expanded_url,json=expandedUrl,proto3" json:"expanded_url,omitempty"`
	Indices       []int32                 `protobuf:"varint,3,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	Url           string                  `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	MediaUrlHttps string                  `protobuf:"bytes,5,opt,name=media_url_https,json=mediaUrlHttps,proto3" json:"media_url_https,omitempty"`
	VideoInfo     *TweetMessage_VideoInfo `protobuf:"bytes,6,opt,name=video_info,json=videoInfo,proto3" json:"video_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TweetMessage_MediaEntity) Reset() {
	*x = TweetMessage_MediaEntity{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_MediaEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_MediaEntity) ProtoMessage() {}

func (x *TweetMessage_MediaEntity) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_MediaEntity.ProtoReflect.Descriptor instead.
func (*TweetMessage_MediaEntity) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 3}
}

func (x *TweetMessage_MediaEntity) GetDisplayUrl() string {
	if x != nil {
		return x.DisplayUrl
	}
	return ""
}

func (x *TweetMessage_MediaEntity) GetExpandedUrl() string {
	if x != nil {
		return x.ExpandedUrl
	}
	return ""
}

func (x *TweetMessage_MediaEntity) GetIndices() []int32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *TweetMessage_MediaEntity) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TweetMessage_MediaEntity) GetMediaUrlHttps() string {
	if x != nil {
		return x.MediaUrlHttps
	}
	return ""
}

func (x *TweetMessage_MediaEntity) GetVideoInfo() *TweetMessage_VideoInfo {
	if x != nil {
		return x.VideoInfo
	}
	return nil
}

type TweetMessage_User struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	IdStr                string                 `protobuf:"bytes,1,opt,name=id_str,json=idStr,proto3" json:"id_str,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProfileImageUrlHttps string                 `protobuf:"bytes,3,opt,name=profile_image_url_https,json=profileImageUrlHttps,proto3" json:"profile_image_url_https,omitempty"`
	ScreenName           string                 `protobuf:"bytes,4,opt,name=screen_name,json=screenName,proto3" json:"screen_name,omitempty"`
	Verified             bool                   `protobuf:"varint,5,opt,name=verified,proto3" json:"verified,omitempty"`
	IsBlueVerified       bool                   `protobuf:"varint,6,opt,name=is_blue_verified,json=isBlueVerified,proto3" json:"is_blue_verified,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TweetMessage_User) Reset() {
	*x = TweetMessage_User{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_User) ProtoMessage() {}

func (x *TweetMessage_User) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_User.ProtoReflect.Descriptor instead.
func (*TweetMessage_User) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 4}
}

func (x *TweetMessage_User) GetIdStr() string {
	if x != nil {
		return x.IdStr
	}
	return ""
}

func (x *TweetMessage_User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TweetMessage_User) GetProfileImageUrlHttps() string {
	if x != nil {
		return x.ProfileImageUrlHttps
	}
	return ""
}

func (x *TweetMessage_User) GetScreenName() string {
	if x != nil {
		return x.ScreenName
	}
	return ""
}

func (x *TweetMessage_User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *TweetMessage_User) GetIsBlueVerified() bool {
	if x != nil {
		return x.IsBlueVerified
	}
	return false
}

type TweetMessage_EditControl struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	EditTweetIds       []string               `protobuf:"bytes,1,rep,name=edit_tweet_ids,json=editTweetIds,proto3" json:"edit_tweet_ids,omitempty"`
	EditableUntilMsecs string                 `protobuf:"bytes,2,opt,name=editable_until_msecs,json=editableUntilMsecs,proto3" json:"editable_until_msecs,omitempty"`
	IsEditEligible     bool                   `protobuf:"varint,3,opt,name=is_edit_eligible,json=isEditEligible,proto3" json:"is_edit_eligible,omitempty"`
	EditsRemaining     string                 `protobuf:"bytes,4,opt,name=edits_remaining,json=editsRemaining,proto3" json:"edits_remaining,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TweetMessage_EditControl) Reset() {
	*x = TweetMessage_EditControl{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_EditControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_EditControl) ProtoMessage() {}

func (x *TweetMessage_EditControl) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_EditControl.ProtoReflect.Descriptor instead.
func (*TweetMessage_EditControl) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 5}
}

func (x *TweetMessage_EditControl) GetEditTweetIds() []string {
	if x != nil {
		return x.EditTweetIds
	}
	return nil
}

func (x *TweetMessage_EditControl) GetEditableUntilMsecs() string {
	if x != nil {
		return x.EditableUntilMsecs
	}
	return ""
}

func (x *TweetMessage_EditControl) GetIsEditEligible() bool {
	if x != nil {
		return x.IsEditEligible
	}
	return false
}

func (x *TweetMessage_EditControl) GetEditsRemaining() string {
	if x != nil {
		return x.EditsRemaining
	}
	return ""
}

type TweetMessage_MediaDetail struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Type          string                  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	MediaUrlHttps string                  `protobuf:"bytes,2,opt,name=media_url_https,json=mediaUrlHttps,proto3" json:"media_url_https,omitempty"`
	VideoInfo     *TweetMessage_VideoInfo `protobuf:"bytes,3,opt,name=video_info,json=videoInfo,proto3,oneof" json:"video_info,omitempty"` // 视频信息改为可选
	// 添加公共媒体字段
	DisplayUrl    string  `protobuf:"bytes,4,opt,name=display_url,json=displayUrl,proto3" json:"display_url,omitempty"`
	ExpandedUrl   string  `protobuf:"bytes,5,opt,name=expanded_url,json=expandedUrl,proto3" json:"expanded_url,omitempty"`
	Indices       []int32 `protobuf:"varint,6,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TweetMessage_MediaDetail) Reset() {
	*x = TweetMessage_MediaDetail{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_MediaDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_MediaDetail) ProtoMessage() {}

func (x *TweetMessage_MediaDetail) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_MediaDetail.ProtoReflect.Descriptor instead.
func (*TweetMessage_MediaDetail) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 6}
}

func (x *TweetMessage_MediaDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TweetMessage_MediaDetail) GetMediaUrlHttps() string {
	if x != nil {
		return x.MediaUrlHttps
	}
	return ""
}

func (x *TweetMessage_MediaDetail) GetVideoInfo() *TweetMessage_VideoInfo {
	if x != nil {
		return x.VideoInfo
	}
	return nil
}

func (x *TweetMessage_MediaDetail) GetDisplayUrl() string {
	if x != nil {
		return x.DisplayUrl
	}
	return ""
}

func (x *TweetMessage_MediaDetail) GetExpandedUrl() string {
	if x != nil {
		return x.ExpandedUrl
	}
	return ""
}

func (x *TweetMessage_MediaDetail) GetIndices() []int32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

type TweetMessage_VideoInfo struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	AspectRatio    []int32                 `protobuf:"varint,1,rep,packed,name=aspect_ratio,json=aspectRatio,proto3" json:"aspect_ratio,omitempty"`
	DurationMillis int64                   `protobuf:"varint,2,opt,name=duration_millis,json=durationMillis,proto3" json:"duration_millis,omitempty"`
	Variants       []*TweetMessage_Variant `protobuf:"bytes,3,rep,name=variants,proto3" json:"variants,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TweetMessage_VideoInfo) Reset() {
	*x = TweetMessage_VideoInfo{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_VideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_VideoInfo) ProtoMessage() {}

func (x *TweetMessage_VideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_VideoInfo.ProtoReflect.Descriptor instead.
func (*TweetMessage_VideoInfo) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 7}
}

func (x *TweetMessage_VideoInfo) GetAspectRatio() []int32 {
	if x != nil {
		return x.AspectRatio
	}
	return nil
}

func (x *TweetMessage_VideoInfo) GetDurationMillis() int64 {
	if x != nil {
		return x.DurationMillis
	}
	return 0
}

func (x *TweetMessage_VideoInfo) GetVariants() []*TweetMessage_Variant {
	if x != nil {
		return x.Variants
	}
	return nil
}

type TweetMessage_Variant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContentType   string                 `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Bitrate       int32                  `protobuf:"varint,3,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TweetMessage_Variant) Reset() {
	*x = TweetMessage_Variant{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_Variant) ProtoMessage() {}

func (x *TweetMessage_Variant) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_Variant.ProtoReflect.Descriptor instead.
func (*TweetMessage_Variant) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 8}
}

func (x *TweetMessage_Variant) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TweetMessage_Variant) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TweetMessage_Variant) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

type TweetMessage_Video struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	AspectRatio   []int32                 `protobuf:"varint,1,rep,packed,name=aspect_ratio,json=aspectRatio,proto3" json:"aspect_ratio,omitempty"`
	ContentType   string                  `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	DurationMs    int64                   `protobuf:"varint,3,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	Poster        string                  `protobuf:"bytes,4,opt,name=poster,proto3" json:"poster,omitempty"`
	Variants      []*TweetMessage_Variant `protobuf:"bytes,5,rep,name=variants,proto3" json:"variants,omitempty"`
	VideoId       *TweetMessage_VideoID   `protobuf:"bytes,6,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TweetMessage_Video) Reset() {
	*x = TweetMessage_Video{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_Video) ProtoMessage() {}

func (x *TweetMessage_Video) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_Video.ProtoReflect.Descriptor instead.
func (*TweetMessage_Video) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 9}
}

func (x *TweetMessage_Video) GetAspectRatio() []int32 {
	if x != nil {
		return x.AspectRatio
	}
	return nil
}

func (x *TweetMessage_Video) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TweetMessage_Video) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *TweetMessage_Video) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *TweetMessage_Video) GetVariants() []*TweetMessage_Variant {
	if x != nil {
		return x.Variants
	}
	return nil
}

func (x *TweetMessage_Video) GetVideoId() *TweetMessage_VideoID {
	if x != nil {
		return x.VideoId
	}
	return nil
}

type TweetMessage_VideoID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TweetMessage_VideoID) Reset() {
	*x = TweetMessage_VideoID{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_VideoID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_VideoID) ProtoMessage() {}

func (x *TweetMessage_VideoID) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_VideoID.ProtoReflect.Descriptor instead.
func (*TweetMessage_VideoID) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 10}
}

func (x *TweetMessage_VideoID) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TweetMessage_VideoID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TweetMessage_Photo_Color struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Red           int32                  `protobuf:"varint,1,opt,name=red,proto3" json:"red,omitempty"`
	Green         int32                  `protobuf:"varint,2,opt,name=green,proto3" json:"green,omitempty"`
	Blue          int32                  `protobuf:"varint,3,opt,name=blue,proto3" json:"blue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TweetMessage_Photo_Color) Reset() {
	*x = TweetMessage_Photo_Color{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_Photo_Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_Photo_Color) ProtoMessage() {}

func (x *TweetMessage_Photo_Color) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_Photo_Color.ProtoReflect.Descriptor instead.
func (*TweetMessage_Photo_Color) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *TweetMessage_Photo_Color) GetRed() int32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *TweetMessage_Photo_Color) GetGreen() int32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *TweetMessage_Photo_Color) GetBlue() int32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

type TweetMessage_Photo_CropCandidate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             int32                  `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32                  `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	W             int32                  `protobuf:"varint,3,opt,name=w,proto3" json:"w,omitempty"`
	H             int32                  `protobuf:"varint,4,opt,name=h,proto3" json:"h,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TweetMessage_Photo_CropCandidate) Reset() {
	*x = TweetMessage_Photo_CropCandidate{}
	mi := &file_lsp_twitter_twitter_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TweetMessage_Photo_CropCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetMessage_Photo_CropCandidate) ProtoMessage() {}

func (x *TweetMessage_Photo_CropCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_lsp_twitter_twitter_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetMessage_Photo_CropCandidate.ProtoReflect.Descriptor instead.
func (*TweetMessage_Photo_CropCandidate) Descriptor() ([]byte, []int) {
	return file_lsp_twitter_twitter_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *TweetMessage_Photo_CropCandidate) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *TweetMessage_Photo_CropCandidate) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *TweetMessage_Photo_CropCandidate) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *TweetMessage_Photo_CropCandidate) GetH() int32 {
	if x != nil {
		return x.H
	}
	return 0
}

var File_lsp_twitter_twitter_proto protoreflect.FileDescriptor

var file_lsp_twitter_twitter_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6c, 0x73, 0x70, 0x2f, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x22, 0xdf, 0x16, 0x0a, 0x0c, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x2e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0b, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x46, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x33, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x09,
	0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x45,
	0x64, 0x69, 0x74, 0x1a, 0x9a, 0x03, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x4c, 0x0a,
	0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x0f, 0x63,
	0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x63, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x55,
	0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x1a, 0x43, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x1a, 0x47, 0x0a, 0x0d, 0x43, 0x72, 0x6f, 0x70, 0x43,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68,
	0x1a, 0x78, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x04,
	0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x12, 0x37, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x7b, 0x0a, 0x09, 0x55, 0x72,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0xe5, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12,
	0x3e, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0xcf, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x62, 0x6c,
	0x75, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x1a, 0xb8, 0x01, 0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0xfb, 0x01, 0x0a,
	0x0b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x55, 0x72, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x92, 0x01, 0x0a, 0x09, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b,
	0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x1a,
	0x58, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x1a, 0xfb, 0x01, 0x0a, 0x05, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a,
	0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x44, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x1a, 0x2d, 0x0a, 0x07, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x09, 0x54, 0x6f, 0x6d, 0x62, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x59, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x74,
	0x6c, 0x22, 0x6a, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x58, 0x0a,
	0x0b, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x0a,
	0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x72, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x6c, 0x73, 0x70, 0x2f, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lsp_twitter_twitter_proto_rawDescOnce sync.Once
	file_lsp_twitter_twitter_proto_rawDescData = file_lsp_twitter_twitter_proto_rawDesc
)

func file_lsp_twitter_twitter_proto_rawDescGZIP() []byte {
	file_lsp_twitter_twitter_proto_rawDescOnce.Do(func() {
		file_lsp_twitter_twitter_proto_rawDescData = protoimpl.X.CompressGZIP(file_lsp_twitter_twitter_proto_rawDescData)
	})
	return file_lsp_twitter_twitter_proto_rawDescData
}

var file_lsp_twitter_twitter_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_lsp_twitter_twitter_proto_goTypes = []any{
	(*TweetMessage)(nil),                     // 0: twitter.TweetMessage
	(*Tombstone)(nil),                        // 1: twitter.Tombstone
	(*Text)(nil),                             // 2: twitter.Text
	(*Entity)(nil),                           // 3: twitter.Entity
	(*TimelineUrl)(nil),                      // 4: twitter.TimelineUrl
	(*TweetMessage_Photo)(nil),               // 5: twitter.TweetMessage.Photo
	(*TweetMessage_Entities)(nil),            // 6: twitter.TweetMessage.Entities
	(*TweetMessage_UrlEntity)(nil),           // 7: twitter.TweetMessage.UrlEntity
	(*TweetMessage_MediaEntity)(nil),         // 8: twitter.TweetMessage.MediaEntity
	(*TweetMessage_User)(nil),                // 9: twitter.TweetMessage.User
	(*TweetMessage_EditControl)(nil),         // 10: twitter.TweetMessage.EditControl
	(*TweetMessage_MediaDetail)(nil),         // 11: twitter.TweetMessage.MediaDetail
	(*TweetMessage_VideoInfo)(nil),           // 12: twitter.TweetMessage.VideoInfo
	(*TweetMessage_Variant)(nil),             // 13: twitter.TweetMessage.Variant
	(*TweetMessage_Video)(nil),               // 14: twitter.TweetMessage.Video
	(*TweetMessage_VideoID)(nil),             // 15: twitter.TweetMessage.VideoID
	(*TweetMessage_Photo_Color)(nil),         // 16: twitter.TweetMessage.Photo.Color
	(*TweetMessage_Photo_CropCandidate)(nil), // 17: twitter.TweetMessage.Photo.CropCandidate
}
var file_lsp_twitter_twitter_proto_depIdxs = []int32{
	6,  // 0: twitter.TweetMessage.entities:type_name -> twitter.TweetMessage.Entities
	9,  // 1: twitter.TweetMessage.user:type_name -> twitter.TweetMessage.User
	10, // 2: twitter.TweetMessage.edit_control:type_name -> twitter.TweetMessage.EditControl
	11, // 3: twitter.TweetMessage.media_details:type_name -> twitter.TweetMessage.MediaDetail
	5,  // 4: twitter.TweetMessage.photos:type_name -> twitter.TweetMessage.Photo
	14, // 5: twitter.TweetMessage.video:type_name -> twitter.TweetMessage.Video
	1,  // 6: twitter.TweetMessage.tombstone:type_name -> twitter.Tombstone
	2,  // 7: twitter.Tombstone.text:type_name -> twitter.Text
	3,  // 8: twitter.Text.entities:type_name -> twitter.Entity
	4,  // 9: twitter.Entity.ref:type_name -> twitter.TimelineUrl
	16, // 10: twitter.TweetMessage.Photo.background_color:type_name -> twitter.TweetMessage.Photo.Color
	17, // 11: twitter.TweetMessage.Photo.crop_candidates:type_name -> twitter.TweetMessage.Photo.CropCandidate
	7,  // 12: twitter.TweetMessage.Entities.urls:type_name -> twitter.TweetMessage.UrlEntity
	8,  // 13: twitter.TweetMessage.Entities.media:type_name -> twitter.TweetMessage.MediaEntity
	12, // 14: twitter.TweetMessage.MediaEntity.video_info:type_name -> twitter.TweetMessage.VideoInfo
	12, // 15: twitter.TweetMessage.MediaDetail.video_info:type_name -> twitter.TweetMessage.VideoInfo
	13, // 16: twitter.TweetMessage.VideoInfo.variants:type_name -> twitter.TweetMessage.Variant
	13, // 17: twitter.TweetMessage.Video.variants:type_name -> twitter.TweetMessage.Variant
	15, // 18: twitter.TweetMessage.Video.video_id:type_name -> twitter.TweetMessage.VideoID
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_lsp_twitter_twitter_proto_init() }
func file_lsp_twitter_twitter_proto_init() {
	if File_lsp_twitter_twitter_proto != nil {
		return
	}
	file_lsp_twitter_twitter_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lsp_twitter_twitter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lsp_twitter_twitter_proto_goTypes,
		DependencyIndexes: file_lsp_twitter_twitter_proto_depIdxs,
		MessageInfos:      file_lsp_twitter_twitter_proto_msgTypes,
	}.Build()
	File_lsp_twitter_twitter_proto = out.File
	file_lsp_twitter_twitter_proto_rawDesc = nil
	file_lsp_twitter_twitter_proto_goTypes = nil
	file_lsp_twitter_twitter_proto_depIdxs = nil
}

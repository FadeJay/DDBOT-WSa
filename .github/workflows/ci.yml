name: "CI"
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  # Run unittest
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go 1.23.4
        run: |
          wget https://golang.org/dl/go1.23.4.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go1.23.4.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          go version
      - name: Run tests
        run: go test -v -coverprofile=profile.cov ./...
      - name: go vet
        run: go vet ./...
      - name: Generate HTML report
        run: go tool cover -html=profile.cov -o coverage.html
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  # Build Linux amd64 binary compatible with CentOS 8 + FFmpeg
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set build time
        run: echo BUILD_TIME=$(date --rfc-3339=seconds) >> $GITHUB_ENV
      - name: Build Linux amd64 binary in CentOS 8 Docker with FFmpeg
        run: |
          docker run --rm -v $PWD:/src -w /src centos:8 bash -c "
            # 替换 yum 源为 Vault（可用）以避免无法解析 mirrorlist
            sed -i 's|mirrorlist=http://mirrorlist.centos.org|#mirrorlist=http://mirrorlist.centos.org|g' /etc/yum.repos.d/CentOS-*.repo
            sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*.repo
            dnf clean all
            dnf makecache

            # 安装工具、GCC、Git 和 FFmpeg
            dnf install -y wget tar make gcc gcc-c++ git ffmpeg epel-release

            # 安装 Go 1.23.4
            wget https://golang.org/dl/go1.23.4.linux-amd64.tar.gz
            rm -rf /usr/local/go
            tar -C /usr/local -xzf go1.23.4.linux-amd64.tar.gz
            export PATH=/usr/local/go/bin:$PATH
            go version

            # 更新模块依赖
            go mod tidy
            go mod download

            # 构建二进制
            GOOS=linux GOARCH=amd64 BINARY_NAME=DDBOT \
            go build -buildvcs=false -o ../\$BINARY_NAME \
            -ldflags '-w -s -X github.com/cnxysoft/DDBOT-WSa/lsp.BuildTime=${BUILD_TIME} -X github.com/cnxysoft/DDBOT-WSa/lsp.CommitId=${GITHUB_SHA}'
          "
      - name: Upload Linux amd64 binary
        uses: actions/upload-artifact@v4
        with:
          name: linux_amd64
          path: ./DDBOT

name: "CI"
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go 1.23.4
        run: |
          curl -LO https://golang.org/dl/go1.23.4.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go1.23.4.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          go version
      - name: Run tests (ignore failures)
        run: |
          go test -v -coverprofile=profile.cov ./... || true
      - name: go vet (ignore failures)
        run: go vet ./... || true
      - name: Generate HTML report
        run: go tool cover -html=profile.cov -o coverage.html
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set build time
        run: echo BUILD_TIME=$(date --rfc-3339=seconds) >> $GITHUB_ENV
      - name: Build Linux amd64 binary in Rocky Linux 8 Docker
        run: |
          docker run --rm -v $PWD:/repo -w /repo rockylinux:8 bash -c "
            # 安装基础工具
            dnf install -y epel-release curl tar xz make gcc gcc-c++ git

            # 下载并安装 FFmpeg 静态二进制
            curl -LO https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
            tar -xf ffmpeg-release-amd64-static.tar.xz
            cp ffmpeg-*/ffmpeg /usr/local/bin/
            cp ffmpeg-*/ffprobe /usr/local/bin/

            # 下载并安装 Go 1.23.4 官方二进制
            curl -LO https://golang.org/dl/go1.23.4.linux-amd64.tar.gz
            rm -rf /usr/local/go
            tar -C /usr/local -xzf go1.23.4.linux-amd64.tar.gz
            export PATH=/usr/local/go/bin:\$PATH
            go version

            # 更新 Go 模块依赖
            go mod tidy
            go mod download

            # 构建二进制（输出文件不会和源码目录冲突）
            GOOS=linux GOARCH=amd64 BINARY_NAME=DDBOT
            go build -buildvcs=false -o ./\$BINARY_NAME ./cmd
          "
      - name: Upload Linux amd64 binary
        uses: actions/upload-artifact@v4
        with:
          name: linux_amd64
          path: ./DDBOT

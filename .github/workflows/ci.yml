name: "CI"
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  # Run unittest
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go: ['1.23.4']

    steps:
      - uses: actions/checkout@v3
      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Run tests
        run: go test -v -coverprofile=profile.cov ./...
      - name: go vet
        run: go vet ./...
      - name: Generate HTML report
        run: go tool cover -html=profile.cov -o coverage.html
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  # Build binary
  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ['1.23.4']
        goos: [linux, windows, darwin]
        goarch: ["386", amd64, arm, arm64]
        exclude:
          - goos: darwin
            goarch: arm
          - goos: darwin
            goarch: "386"
      fail-fast: true

    steps:
      - uses: actions/checkout@v3
      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}

      - name: Set build time
        run: echo BUILD_TIME=$(date --rfc-3339=seconds) >> $GITHUB_ENV

      # Linux binary in Golang CentOS 8 Docker (GLIBC 2.28)
      - name: Build Linux binary (GLIBC 2.28)
        if: matrix.goos == 'linux'
        run: |
          docker run --rm -v $PWD:/src -w /src golang:1.23.4-centos8 bash -c "
            export GOOS=linux
            export GOARCH=${{ matrix.goarch }}
            BINARY_NAME=DDBOT
            [ \$GOOS = 'windows' ] && BINARY_NAME=DDBOT.exe || true
            go build -o \$BINARY_NAME -ldflags '-w -s -X github.com/cnxysoft/DDBOT-WSa/lsp.BuildTime=${{ env.BUILD_TIME }} -X github.com/cnxysoft/DDBOT-WSa/lsp.CommitId=${{ github.sha }}' github.com/cnxysoft/DDBOT-WSa/cmd
          "

      # Windows/macOS binaries
      - name: Build Windows/macOS binaries
        if: matrix.goos != 'linux'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          BINARY_NAME=DDBOT
          [ $GOOS = "windows" ] && BINARY_NAME=DDBOT.exe
          go build -o "$BINARY_NAME" -ldflags '-w -s -X github.com/cnxysoft/DDBOT-WSa/lsp.BuildTime=${{ env.BUILD_TIME }} -X github.com/cnxysoft/DDBOT-WSa/lsp.CommitId=${{ github.sha }}' github.com/cnxysoft/DDBOT-WSa/cmd

      # Upload artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: ${{ !github.head_ref }}
        with:
          name: ${{ matrix.goos }}_${{ matrix.goarch }}
          path: |
            ./DDBOT
            ./DDBOT.exe
